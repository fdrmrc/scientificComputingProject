//Solution of P-laplace via functional minimization by NLCG
real TargetP = 15.0;
real r= 1;

// Mesh
load "msh3"
load "medit"
load "iovtk"

mesh3 Th("sphereSadapted.meshb");


// Finite element space
fespace Vh(Th, P1);
Vh u0,u,v;

int maxrestart = 20;
int conv = 0;
real n = 3.0;

real p = 2.5;

func f = 0.0;

macro grad(u) [dx(u),dy(u),dz(u)] //EOM defining the gradient of u

func uexact = sqrt(x^2+y^2+z^2)^(-(n-p)/(p-1));
real R = 4.0;
real VAL = uexact(R,0,0);


solve Poisson(u0,v) = int3d(Th)(grad(u0)'*grad(v))-int3d(Th)(f*v) + on(10,u0=1)+on(100,u0=VAL);
u=u0;

func real[int] dJ (real[int] & ucc){
        Vh w;
        w[] = ucc;
        varf au(uh,vh) = int3d(Th)((grad(w)'*grad(w))^((p-2)/2)*(grad(w)'*grad(vh))-f*vh); //We define the functional to be minimized
        real[int] r = au(0,Vh);
        return r;
}

fespace Ph(Th,P0);
Ph normGrad;
normGrad = grad(u)'*grad(u);

varf delta2tildeJR(w,v) = int3d(Th)(normGrad^((p-2)/2)*(grad(w)'*grad(v)))
                          + on(10, w=1) + on(100,w=VAL);

matrix P = delta2tildeJR(Vh,Vh,solver=Cholesky,factorize=1);

func real[int] C(real[int] & vec)
{
  real[int] r = P^(-1)*vec;
  return r;
}

for (int i=0;i<maxrestart;i++){
  conv = NLCG(dJ,precon=C,u[], nbiter=20,eps=-1e-13);
  if (conv) break;
  normGrad = grad(u)'*grad(u);
  P = delta2tildeJR(Vh,Vh, solver=Cholesky, factorize=1);
}
cout<<"Numero p: "<<endl<<p<<endl;
cout<<"Errore mediato:"<<endl<<(sqrt(int3d(Th)((u-uexact)^2)))<<endl; //Here the L2 error is averaged over the whole volume of the domain

string s = "caseP"+p+".vtu";
int[int] Order = [1];
string DataName = "u";
savevtk(s, Th, u, dataname=DataName, order=Order);

fespace Dh(Th, P0);
Dh semi;
semi = grad(u)'*grad(u);

string DataName2 = "semi";
savevtk("critical.vtu", Th, semi, dataname=DataName2, order=Order);
